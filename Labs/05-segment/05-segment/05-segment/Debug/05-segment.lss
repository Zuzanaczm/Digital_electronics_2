
05-segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000030a  0000039e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080010e  0080010e  000003ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010d7  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a02  00000000  00000000  000015a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000650  00000000  00000000  00001fa5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  000025f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000586  00000000  00000000  00002778  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004aa  00000000  00000000  00002cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000031a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	7f c0       	rjmp	.+254    	; 0x13c <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	b0 c0       	rjmp	.+352    	; 0x1aa <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e0       	ldi	r30, 0x0A	; 10
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 31       	cpi	r26, 0x12	; 18
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	27 d0       	rcall	.+78     	; 0x112 <main>
  c4:	20 c1       	rjmp	.+576    	; 0x306 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  c8:	fc 01       	movw	r30, r24
  ca:	40 81       	ld	r20, Z
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <GPIO_config_output+0xe>
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <GPIO_config_output+0xa>
  da:	24 2b       	or	r18, r20
  dc:	20 83       	st	Z, r18
  de:	08 95       	ret

000000e0 <GPIO_write_low>:
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/

void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  e0:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num); 
  e2:	90 81       	ld	r25, Z
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <GPIO_write_low+0xe>
  ea:	22 0f       	add	r18, r18
  ec:	33 1f       	adc	r19, r19
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <GPIO_write_low+0xa>
  f2:	20 95       	com	r18
  f4:	29 23       	and	r18, r25
  f6:	20 83       	st	Z, r18
  f8:	08 95       	ret

000000fa <GPIO_write_high>:
}

void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num); 
  fa:	fc 01       	movw	r30, r24
  fc:	40 81       	ld	r20, Z
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <GPIO_write_high+0xe>
 104:	22 0f       	add	r18, r18
 106:	33 1f       	adc	r19, r19
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <GPIO_write_high+0xa>
 10c:	24 2b       	or	r18, r20
 10e:	20 83       	st	Z, r18
 110:	08 95       	ret

00000112 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configure SSD signals
    SEG_init();
 112:	85 d0       	rcall	.+266    	; 0x21e <SEG_init>

    // Test of SSD: display number '3' at position 0
    SEG_update_shift_regs(3,0);
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	83 e0       	ldi	r24, 0x03	; 3
 118:	8f d0       	rcall	.+286    	; 0x238 <SEG_update_shift_regs>
    //
    //TIM0_overflow_4ms();
    //TIM0_overflow_interrupt_enable();
    // Enables interrupts by setting the global interrupt mask
    
    sei();
 11a:	78 94       	sei

    // Infinite loop
    while (1)
    {
    SEG_update_shift_regs(9,0);
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	89 e0       	ldi	r24, 0x09	; 9
 120:	8b d0       	rcall	.+278    	; 0x238 <SEG_update_shift_regs>
    SEG_update_shift_regs(5,1);
 122:	61 e0       	ldi	r22, 0x01	; 1
 124:	85 e0       	ldi	r24, 0x05	; 5
 126:	88 d0       	rcall	.+272    	; 0x238 <SEG_update_shift_regs>
    SEG_update_shift_regs(11,2);
 128:	62 e0       	ldi	r22, 0x02	; 2
 12a:	8b e0       	ldi	r24, 0x0B	; 11
 12c:	85 d0       	rcall	.+266    	; 0x238 <SEG_update_shift_regs>
    SEG_update_shift_regs(9,2);
 12e:	62 e0       	ldi	r22, 0x02	; 2
 130:	89 e0       	ldi	r24, 0x09	; 9
 132:	82 d0       	rcall	.+260    	; 0x238 <SEG_update_shift_regs>
    SEG_update_shift_regs(5,3);
 134:	63 e0       	ldi	r22, 0x03	; 3
 136:	85 e0       	ldi	r24, 0x05	; 5
 138:	7f d0       	rcall	.+254    	; 0x238 <SEG_update_shift_regs>
 13a:	f0 cf       	rjmp	.-32     	; 0x11c <main+0xa>

0000013c <__vector_15>:
 13c:	1f 92       	push	r1
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Increment decimal counter value and display it on SSD.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	2f 93       	push	r18
 148:	8f 93       	push	r24
 14a:	9f 93       	push	r25
    if(counter <= 59)
 14c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <counter>
 150:	8c 33       	cpi	r24, 0x3C	; 60
 152:	08 f5       	brcc	.+66     	; 0x196 <__vector_15+0x5a>
    {
    counter++;    
 154:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <counter>
 158:	8f 5f       	subi	r24, 0xFF	; 255
 15a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <counter>
    digit1 = counter / 10;
 15e:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <counter>
 162:	8d ec       	ldi	r24, 0xCD	; 205
 164:	98 9f       	mul	r25, r24
 166:	91 2d       	mov	r25, r1
 168:	11 24       	eor	r1, r1
 16a:	96 95       	lsr	r25
 16c:	96 95       	lsr	r25
 16e:	96 95       	lsr	r25
 170:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <digit1>
    digit0 = counter % 10;
 174:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <counter>
 178:	28 9f       	mul	r18, r24
 17a:	81 2d       	mov	r24, r1
 17c:	11 24       	eor	r1, r1
 17e:	86 95       	lsr	r24
 180:	86 95       	lsr	r24
 182:	86 95       	lsr	r24
 184:	88 0f       	add	r24, r24
 186:	98 2f       	mov	r25, r24
 188:	99 0f       	add	r25, r25
 18a:	99 0f       	add	r25, r25
 18c:	89 0f       	add	r24, r25
 18e:	28 1b       	sub	r18, r24
 190:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <digit0>
 194:	02 c0       	rjmp	.+4      	; 0x19a <__vector_15+0x5e>
    }
    
    else
    {
    counter = 0;
 196:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <counter>
    }
}
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	2f 91       	pop	r18
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <__vector_18>:

ISR(TIMER0_OVF_vect)
{
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	0b b6       	in	r0, 0x3b	; 59
 1b6:	0f 92       	push	r0
 1b8:	2f 93       	push	r18
 1ba:	3f 93       	push	r19
 1bc:	4f 93       	push	r20
 1be:	5f 93       	push	r21
 1c0:	6f 93       	push	r22
 1c2:	7f 93       	push	r23
 1c4:	8f 93       	push	r24
 1c6:	9f 93       	push	r25
 1c8:	af 93       	push	r26
 1ca:	bf 93       	push	r27
 1cc:	ef 93       	push	r30
 1ce:	ff 93       	push	r31
    static uint8_t pos = 0;
        if (pos == 0)
 1d0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 1d4:	81 11       	cpse	r24, r1
 1d6:	0a c0       	rjmp	.+20     	; 0x1ec <__vector_18+0x42>
        {
            SEG_update_shift_regs(digit1, 1);
 1d8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <digit1>
 1dc:	61 e0       	ldi	r22, 0x01	; 1
 1de:	2c d0       	rcall	.+88     	; 0x238 <SEG_update_shift_regs>
            pos++;
 1e0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 1e4:	8f 5f       	subi	r24, 0xFF	; 255
 1e6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 1ea:	06 c0       	rjmp	.+12     	; 0x1f8 <__vector_18+0x4e>
        }
        else
        { 
            SEG_update_shift_regs(digit0, 0);
 1ec:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <digit0>
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	22 d0       	rcall	.+68     	; 0x238 <SEG_update_shift_regs>
            pos = 0;      
 1f4:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
        }
       
 1f8:	ff 91       	pop	r31
 1fa:	ef 91       	pop	r30
 1fc:	bf 91       	pop	r27
 1fe:	af 91       	pop	r26
 200:	9f 91       	pop	r25
 202:	8f 91       	pop	r24
 204:	7f 91       	pop	r23
 206:	6f 91       	pop	r22
 208:	5f 91       	pop	r21
 20a:	4f 91       	pop	r20
 20c:	3f 91       	pop	r19
 20e:	2f 91       	pop	r18
 210:	0f 90       	pop	r0
 212:	0b be       	out	0x3b, r0	; 59
 214:	0f 90       	pop	r0
 216:	0f be       	out	0x3f, r0	; 63
 218:	0f 90       	pop	r0
 21a:	1f 90       	pop	r1
 21c:	18 95       	reti

0000021e <SEG_init>:
 * Returns:  none
 **********************************************************************/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEG_LATCH);
 21e:	64 e0       	ldi	r22, 0x04	; 4
 220:	8a e2       	ldi	r24, 0x2A	; 42
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	51 df       	rcall	.-350    	; 0xc8 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEG_CLK);
 226:	67 e0       	ldi	r22, 0x07	; 7
 228:	8a e2       	ldi	r24, 0x2A	; 42
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	4d df       	rcall	.-358    	; 0xc8 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEG_DATA);
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	84 e2       	ldi	r24, 0x24	; 36
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	49 cf       	rjmp	.-366    	; 0xc8 <GPIO_config_output>
 236:	08 95       	ret

00000238 <SEG_update_shift_regs>:



/*--------------------------------------------------------------------*/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 238:	1f 93       	push	r17
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
    uint8_t bit_number;
    segments = segment_value[segments];     // 0, 1, ..., 9
 23e:	e8 2f       	mov	r30, r24
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	ec 5f       	subi	r30, 0xFC	; 252
 244:	fe 4f       	sbci	r31, 0xFE	; 254
 246:	10 81       	ld	r17, Z
    position = segment_position[position];  // 0, 1, 2, 3
 248:	e6 2f       	mov	r30, r22
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	e0 50       	subi	r30, 0x00	; 0
 24e:	ff 4f       	sbci	r31, 0xFF	; 255
 250:	d0 81       	ld	r29, Z
	
    GPIO_write_low(&PORTD, SEG_LATCH);
 252:	64 e0       	ldi	r22, 0x04	; 4
 254:	8b e2       	ldi	r24, 0x2B	; 43
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	43 df       	rcall	.-378    	; 0xe0 <GPIO_write_low>
    GPIO_write_low(&PORTD, SEG_CLK);
 25a:	67 e0       	ldi	r22, 0x07	; 7
 25c:	8b e2       	ldi	r24, 0x2B	; 43
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	3f df       	rcall	.-386    	; 0xe0 <GPIO_write_low>
    GPIO_write_low(&PORTB, SEG_DATA);
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	85 e2       	ldi	r24, 0x25	; 37
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	3b df       	rcall	.-394    	; 0xe0 <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26a:	85 e0       	ldi	r24, 0x05	; 5
 26c:	8a 95       	dec	r24
 26e:	f1 f7       	brne	.-4      	; 0x26c <SEG_update_shift_regs+0x34>
 270:	00 00       	nop
 272:	c8 e0       	ldi	r28, 0x08	; 8
    // a b c d e f g DP (active low values)
   for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "segments" by & (faster) or % (slower) and... 
        // ...output DATA value
        if ((segments & 1) == 1)
 274:	10 ff       	sbrs	r17, 0
 276:	05 c0       	rjmp	.+10     	; 0x282 <SEG_update_shift_regs+0x4a>
        {
            GPIO_write_high(&PORTB, SEG_DATA);    
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	85 e2       	ldi	r24, 0x25	; 37
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	3d df       	rcall	.-390    	; 0xfa <GPIO_write_high>
 280:	04 c0       	rjmp	.+8      	; 0x28a <SEG_update_shift_regs+0x52>
        }
        else
        {
            GPIO_write_low(&PORTB, SEG_DATA);
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	85 e2       	ldi	r24, 0x25	; 37
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	2b df       	rcall	.-426    	; 0xe0 <GPIO_write_low>
 28a:	85 e0       	ldi	r24, 0x05	; 5
 28c:	8a 95       	dec	r24
 28e:	f1 f7       	brne	.-4      	; 0x28c <SEG_update_shift_regs+0x54>
 290:	00 00       	nop
        
        // Wait 1 us
        _delay_us(1);
        
        // Pull CLK high
        GPIO_write_high(&PORTD, SEG_CLK);
 292:	67 e0       	ldi	r22, 0x07	; 7
 294:	8b e2       	ldi	r24, 0x2B	; 43
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	30 df       	rcall	.-416    	; 0xfa <GPIO_write_high>
 29a:	85 e0       	ldi	r24, 0x05	; 5
 29c:	8a 95       	dec	r24
 29e:	f1 f7       	brne	.-4      	; 0x29c <SEG_update_shift_regs+0x64>
 2a0:	00 00       	nop
        
        // Wait 1 us
        _delay_us(1);
        
        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
 2a2:	67 e0       	ldi	r22, 0x07	; 7
 2a4:	8b e2       	ldi	r24, 0x2B	; 43
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	1b df       	rcall	.-458    	; 0xe0 <GPIO_write_low>
 2aa:	16 95       	lsr	r17
        
        // Shift "segments"
        segments = segments >> 1;
 2ac:	c1 50       	subi	r28, 0x01	; 1
 2ae:	11 f7       	brne	.-60     	; 0x274 <SEG_update_shift_regs+0x3c>
    GPIO_write_low(&PORTB, SEG_DATA);
    
   _delay_us(1);
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
   for (bit_number = 0; bit_number < 8; bit_number++)
 2b0:	c8 e0       	ldi	r28, 0x08	; 8
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "position" by & (faster) or % (slower) and... 
        // ...output DATA value
        if ((position & 1) == 1)
 2b2:	d0 ff       	sbrs	r29, 0
 2b4:	05 c0       	rjmp	.+10     	; 0x2c0 <SEG_update_shift_regs+0x88>
        {
            GPIO_write_high(&PORTB, SEG_DATA);
 2b6:	60 e0       	ldi	r22, 0x00	; 0
 2b8:	85 e2       	ldi	r24, 0x25	; 37
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	1e df       	rcall	.-452    	; 0xfa <GPIO_write_high>
 2be:	04 c0       	rjmp	.+8      	; 0x2c8 <SEG_update_shift_regs+0x90>
        }
        else
        {
            GPIO_write_low(&PORTB, SEG_DATA);
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	85 e2       	ldi	r24, 0x25	; 37
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0c df       	rcall	.-488    	; 0xe0 <GPIO_write_low>
 2c8:	85 e0       	ldi	r24, 0x05	; 5
 2ca:	8a 95       	dec	r24
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <SEG_update_shift_regs+0x92>
 2ce:	00 00       	nop

        // Wait 1 us
        _delay_us(1);

        // Pull CLK high
        GPIO_write_high(&PORTD, SEG_CLK);
 2d0:	67 e0       	ldi	r22, 0x07	; 7
 2d2:	8b e2       	ldi	r24, 0x2B	; 43
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	11 df       	rcall	.-478    	; 0xfa <GPIO_write_high>
 2d8:	85 e0       	ldi	r24, 0x05	; 5
 2da:	8a 95       	dec	r24
 2dc:	f1 f7       	brne	.-4      	; 0x2da <SEG_update_shift_regs+0xa2>
 2de:	00 00       	nop
        
        // Wait 1 us
        _delay_us(1);

        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
 2e0:	67 e0       	ldi	r22, 0x07	; 7
 2e2:	8b e2       	ldi	r24, 0x2B	; 43
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	fc de       	rcall	.-520    	; 0xe0 <GPIO_write_low>
        
        // Shift "position"
        position = position >> 1;
 2e8:	d6 95       	lsr	r29
 2ea:	c1 50       	subi	r28, 0x01	; 1
        segments = segments >> 1;
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 2ec:	11 f7       	brne	.-60     	; 0x2b2 <SEG_update_shift_regs+0x7a>
        position = position >> 1;
        
    }

    // Pull LATCH high
    GPIO_write_high(&PORTD, SEG_LATCH);
 2ee:	64 e0       	ldi	r22, 0x04	; 4
 2f0:	8b e2       	ldi	r24, 0x2B	; 43
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	02 df       	rcall	.-508    	; 0xfa <GPIO_write_high>
 2f6:	85 e0       	ldi	r24, 0x05	; 5
 2f8:	8a 95       	dec	r24
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <SEG_update_shift_regs+0xc0>
 2fc:	00 00       	nop
 2fe:	df 91       	pop	r29
    
    // Wait 1 us
    _delay_us(1);

}
 300:	cf 91       	pop	r28
 302:	1f 91       	pop	r17
 304:	08 95       	ret

00000306 <_exit>:
 306:	f8 94       	cli

00000308 <__stop_program>:
 308:	ff cf       	rjmp	.-2      	; 0x308 <__stop_program>
