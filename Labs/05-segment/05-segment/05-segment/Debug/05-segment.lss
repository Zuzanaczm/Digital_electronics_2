
05-segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f06  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009a7  00000000  00000000  00001266  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f7  00000000  00000000  00001c0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000108  00000000  00000000  00002104  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000546  00000000  00000000  0000220c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000330  00000000  00000000  00002752  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002a82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	67 c0       	rjmp	.+206    	; 0x10c <__vector_15>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ef       	ldi	r30, 0xFC	; 252
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	27 d0       	rcall	.+78     	; 0x102 <main>
  b4:	a1 c0       	rjmp	.+322    	; 0x1f8 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  b8:	fc 01       	movw	r30, r24
  ba:	40 81       	ld	r20, Z
  bc:	21 e0       	ldi	r18, 0x01	; 1
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <GPIO_config_output+0xe>
  c2:	22 0f       	add	r18, r18
  c4:	33 1f       	adc	r19, r19
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <GPIO_config_output+0xa>
  ca:	24 2b       	or	r18, r20
  cc:	20 83       	st	Z, r18
  ce:	08 95       	ret

000000d0 <GPIO_write_low>:
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/

void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  d0:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num); 
  d2:	90 81       	ld	r25, Z
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <GPIO_write_low+0xe>
  da:	22 0f       	add	r18, r18
  dc:	33 1f       	adc	r19, r19
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <GPIO_write_low+0xa>
  e2:	20 95       	com	r18
  e4:	29 23       	and	r18, r25
  e6:	20 83       	st	Z, r18
  e8:	08 95       	ret

000000ea <GPIO_write_high>:
}

void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num); 
  ea:	fc 01       	movw	r30, r24
  ec:	40 81       	ld	r20, Z
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <GPIO_write_high+0xe>
  f4:	22 0f       	add	r18, r18
  f6:	33 1f       	adc	r19, r19
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <GPIO_write_high+0xa>
  fc:	24 2b       	or	r18, r20
  fe:	20 83       	st	Z, r18
 100:	08 95       	ret

00000102 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configure SSD signals
    SEG_init();
 102:	0e d0       	rcall	.+28     	; 0x120 <SEG_init>

    // Test of SSD: display number '3' at position 0
    SEG_update_shift_regs(0b00001101, 0b00010000);
 104:	60 e1       	ldi	r22, 0x10	; 16
 106:	8d e0       	ldi	r24, 0x0D	; 13
 108:	18 d0       	rcall	.+48     	; 0x13a <SEG_update_shift_regs>
 10a:	ff cf       	rjmp	.-2      	; 0x10a <main+0x8>

0000010c <__vector_15>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Increment decimal counter value and display it on SSD.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1

    // WRITE YOUR CODE HERE

 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <SEG_init>:
 * Returns:  none
 **********************************************************************/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEGMENT_LATCH);
 120:	64 e0       	ldi	r22, 0x04	; 4
 122:	8a e2       	ldi	r24, 0x2A	; 42
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	c8 df       	rcall	.-112    	; 0xb8 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEGMENT_CLK);
 128:	67 e0       	ldi	r22, 0x07	; 7
 12a:	8a e2       	ldi	r24, 0x2A	; 42
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	c4 df       	rcall	.-120    	; 0xb8 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEGMENT_DATA);
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	84 e2       	ldi	r24, 0x24	; 36
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	c0 cf       	rjmp	.-128    	; 0xb8 <GPIO_config_output>
 138:	08 95       	ret

0000013a <SEG_update_shift_regs>:
};


/*--------------------------------------------------------------------*/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	18 2f       	mov	r17, r24
 142:	d6 2f       	mov	r29, r22
    uint8_t bit_number;

    GPIO_write_low(&PORTD, SEGMENT_LATCH);
 144:	64 e0       	ldi	r22, 0x04	; 4
 146:	8b e2       	ldi	r24, 0x2B	; 43
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	c2 df       	rcall	.-124    	; 0xd0 <GPIO_write_low>
    GPIO_write_low(&PORTD, SEGMENT_CLK);
 14c:	67 e0       	ldi	r22, 0x07	; 7
 14e:	8b e2       	ldi	r24, 0x2B	; 43
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	be df       	rcall	.-132    	; 0xd0 <GPIO_write_low>
    GPIO_write_low(&PORTB, SEGMENT_DATA);
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	85 e2       	ldi	r24, 0x25	; 37
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	ba df       	rcall	.-140    	; 0xd0 <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	85 e0       	ldi	r24, 0x05	; 5
 15e:	8a 95       	dec	r24
 160:	f1 f7       	brne	.-4      	; 0x15e <SEG_update_shift_regs+0x24>
 162:	00 00       	nop
 164:	c8 e0       	ldi	r28, 0x08	; 8
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "segments" by & (faster) or % (slower) and... 
        // ...output DATA value
      if (segments & 1)
 166:	10 ff       	sbrs	r17, 0
 168:	05 c0       	rjmp	.+10     	; 0x174 <SEG_update_shift_regs+0x3a>
      {   GPIO_write_high(&PORTD, SEGMENT_DATA);
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	8b e2       	ldi	r24, 0x2B	; 43
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	bc df       	rcall	.-136    	; 0xea <GPIO_write_high>
 172:	04 c0       	rjmp	.+8      	; 0x17c <SEG_update_shift_regs+0x42>
          } 
         
      
      else 
           GPIO_write_low(&PORTD, SEGMENT_DATA);
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	8b e2       	ldi	r24, 0x2B	; 43
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	aa df       	rcall	.-172    	; 0xd0 <GPIO_write_low>
 17c:	85 e0       	ldi	r24, 0x05	; 5
 17e:	8a 95       	dec	r24
 180:	f1 f7       	brne	.-4      	; 0x17e <SEG_update_shift_regs+0x44>
 182:	00 00       	nop
          
          
        _delay_us(1);
       
          GPIO_write_high(&PORTD, SEGMENT_CLK);
 184:	67 e0       	ldi	r22, 0x07	; 7
 186:	8b e2       	ldi	r24, 0x2B	; 43
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	af df       	rcall	.-162    	; 0xea <GPIO_write_high>
 18c:	85 e0       	ldi	r24, 0x05	; 5
 18e:	8a 95       	dec	r24
 190:	f1 f7       	brne	.-4      	; 0x18e <SEG_update_shift_regs+0x54>
 192:	00 00       	nop

        _delay_us(1);

         GPIO_write_low(&PORTD, SEGMENT_CLK);
 194:	67 e0       	ldi	r22, 0x07	; 7
 196:	8b e2       	ldi	r24, 0x2B	; 43
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	9a df       	rcall	.-204    	; 0xd0 <GPIO_write_low>
 19c:	16 95       	lsr	r17
       
        // Shift "segments"
        segments = segments >> 1;
 19e:	c1 50       	subi	r28, 0x01	; 1
 1a0:	11 f7       	brne	.-60     	; 0x166 <SEG_update_shift_regs+0x2c>
    GPIO_write_low(&PORTB, SEGMENT_DATA);
    
   _delay_us(1);
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 1a2:	c8 e0       	ldi	r28, 0x08	; 8

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
          if (position & 1)
 1a4:	d0 ff       	sbrs	r29, 0
 1a6:	05 c0       	rjmp	.+10     	; 0x1b2 <SEG_update_shift_regs+0x78>
          { GPIO_write_high(&PORTD, SEGMENT_DATA);     
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	8b e2       	ldi	r24, 0x2B	; 43
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	9d df       	rcall	.-198    	; 0xea <GPIO_write_high>
 1b0:	04 c0       	rjmp	.+8      	; 0x1ba <SEG_update_shift_regs+0x80>
             }
          
          
          else
              
            GPIO_write_low(&PORTD, SEGMENT_DATA);
 1b2:	60 e0       	ldi	r22, 0x00	; 0
 1b4:	8b e2       	ldi	r24, 0x2B	; 43
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	8b df       	rcall	.-234    	; 0xd0 <GPIO_write_low>
 1ba:	85 e0       	ldi	r24, 0x05	; 5
 1bc:	8a 95       	dec	r24
 1be:	f1 f7       	brne	.-4      	; 0x1bc <SEG_update_shift_regs+0x82>
 1c0:	00 00       	nop
              
         
     _delay_us(1);

    GPIO_write_high(&PORTD, SEGMENT_CLK);
 1c2:	67 e0       	ldi	r22, 0x07	; 7
 1c4:	8b e2       	ldi	r24, 0x2B	; 43
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	90 df       	rcall	.-224    	; 0xea <GPIO_write_high>
 1ca:	85 e0       	ldi	r24, 0x05	; 5
 1cc:	8a 95       	dec	r24
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <SEG_update_shift_regs+0x92>
 1d0:	00 00       	nop

    _delay_us(1);

    GPIO_write_low(&PORTD, SEGMENT_CLK);
 1d2:	67 e0       	ldi	r22, 0x07	; 7
 1d4:	8b e2       	ldi	r24, 0x2B	; 43
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	7b df       	rcall	.-266    	; 0xd0 <GPIO_write_low>

        // Shift "position"
        position = position >> 1;
 1da:	d6 95       	lsr	r29
 1dc:	c1 50       	subi	r28, 0x01	; 1
        segments = segments >> 1;
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 1de:	11 f7       	brne	.-60     	; 0x1a4 <SEG_update_shift_regs+0x6a>

        // Shift "position"
        position = position >> 1;
    }

     GPIO_write_high(&PORTD, SEGMENT_LATCH);
 1e0:	64 e0       	ldi	r22, 0x04	; 4
 1e2:	8b e2       	ldi	r24, 0x2B	; 43
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	81 df       	rcall	.-254    	; 0xea <GPIO_write_high>
 1e8:	85 e0       	ldi	r24, 0x05	; 5
 1ea:	8a 95       	dec	r24
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <SEG_update_shift_regs+0xb0>
 1ee:	00 00       	nop
 1f0:	df 91       	pop	r29

    _delay_us(1);

}
 1f2:	cf 91       	pop	r28
 1f4:	1f 91       	pop	r17
 1f6:	08 95       	ret

000001f8 <_exit>:
 1f8:	f8 94       	cli

000001fa <__stop_program>:
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <__stop_program>
